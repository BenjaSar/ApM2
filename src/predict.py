"""
predict.py

DESCRIPTION:
A script to load a trained model, make predictions on the dataset, and save the results.

AUTHORS:
FS 
Vilcamiza Espinoza, Gerardo Alexis
DATE: 24 Julio 2023
"""

# Imports
import logging
import joblib
import pandas as pd

class MakePredictionPipeline(object):
    """
    Pipeline to manage the loading of data, application of a trained model, 
    and saving of predictions.

    Args:
        input_path (str): Path to the input CSV data file.
        output_path (str): Path where predictions should be written.
        model_path (str, optional): Path to the trained model. Defaults to None.
    """
    
    def __init__(self, input_path, input_path_test, output_path, model_path: str = None):
        self.input_path = input_path
        self.input_path_test = input_path_test
        self.output_path = output_path
        self.model_path = model_path

    def load_data(self) -> pd.DataFrame:
        """
        Load the dataset from the specified input path.

        Returns:
            pd.DataFrame: Loaded dataset.
        """
        try:
            logging.info(f"Loading data from: {self.input_path}")
            pandas_df = pd.read_csv(self.input_path)
            return pandas_df
        except FileNotFoundError:
            logging.error(f"File not found at: {self.input_path}")
            return pd.DataFrame()
        except (PermissionError, OSError) as error_load_file:
            logging.exception("Error encountered while loading data: %s", error_load_file)
            return pd.DataFrame()
        
    def load_data_test(self) -> pd.DataFrame:
        """
        Load the test dataset from the specified input path.

        Returns:
            pd.DataFrame: Loaded test dataset.
        """
        try:
            logging.info(f"Loading data from: {self.input_path_test}")
            pandas_df = pd.read_csv(self.input_path_test)
            return pandas_df
        except FileNotFoundError:
            logging.error(f"File not found at: {self.input_path_test}")
            return pd.DataFrame()
        except (PermissionError, OSError) as error_load_file:
            logging.exception("Error encountered while loading data: %s", error_load_file)
            return pd.DataFrame()

    def load_model(self) -> None:
        """
        Load the trained model from the specified path.
        """
        try:
            logging.info(f"Loading model from: {self.model_path}")
            self.model = joblib.load(self.model_path)
        except FileNotFoundError:
            logging.error(f"Model file not found at: {self.model_path}")
        except (PermissionError, OSError) as error_load_model:
            logging.exception("Error encountered while loading the model: %s", error_load_model)

    def make_predictions(self, data: pd.DataFrame) -> pd.DataFrame:
        """
        Generate predictions using the trained model on the provided dataset.

        Args:
            data (pd.DataFrame): Dataset on which predictions should be made.

        Returns:
            pd.DataFrame: Predictions generated by the model.
        """
        try:
            logging.info("Processing data and making predictions")
            data.drop(['Unnamed: 0', 'Outlet_Identifier', 'Item_Identifier',
                       'Item_Outlet_Sales', 'Set'], axis=1, inplace=True, errors='ignore')
            new_data = self.model.predict(data)
            return new_data
        except Exception as error_predictions:
            logging.exception("Error encountered while making predictions: %s", error_predictions)
            return pd.DataFrame()

    def write_predictions(self, predicted_data: pd.DataFrame, filename: str = "predictions.csv") -> None:
        """
        Save the model's predictions to a CSV file.

        Args:
            predicted_data (pd.DataFrame): Predictions to be saved.
            filename (str): Desired name of the output CSV file. Defaults to "predictions.csv".
        """
        try:
            logging.info(f"Writing predictions to: {self.output_path}/{filename}")
            if filename == "predictions.csv":
                df_predicted_data = pd.DataFrame(predicted_data, columns=['Prediction'])
            else:
                df_predicted_data = predicted_data
            df_predicted_data.to_csv(f"{self.output_path}/{filename}", index=False)
        except (PermissionError, OSError) as error_write_file:
            logging.exception("Error encountered while writing predictions: %s", error_write_file)
            

    def run(self):
        """
        Execute the pipeline: load data, load the model, make predictions, and save results.
        """
        data = self.load_data()
        self.load_model()
        df_preds = self.make_predictions(data)
        self.write_predictions(df_preds)

        data_test = self.load_data_test()
        data_test["pred_Sales"] = self.make_predictions(data_test)
        self.write_predictions(data_test, "test_predictions.csv")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    
    pipeline = MakePredictionPipeline(
        input_path='../data/dataframe.csv',
        input_path_test='../model/test_final.csv',
        output_path='../predict',
        model_path='../model/trained_model.pkl')
    pipeline.run()
